/**
 * Gym Operations Tracking Sheet - SIMPLIFIED v2.0
 * 
 * IMPROVEMENTS IMPLEMENTED:
 * ✅ 8 tabs instead of 16 (50% reduction)
 * ✅ 25 columns instead of 37 (32% reduction)
 * ✅ Unified DASHBOARD (one-page morning check)
 * ✅ Formula-based dates (no complex triggers)
 * ✅ Quick Start Wizard (2-minute setup)
 * ✅ Auto-created charts (zero manual work)
 * ✅ No protections (faster editing)
 * ✅ Removed: Mappings, Cohorts, Snapshots, onEdit complexity
 * 
 * TAB STRUCTURE (8 tabs):
 * 1. DASHBOARD - All KPIs, alerts, and actions in one place
 * 2. Lead Data - Simplified 25-column entry
 * 3. Members - Active members view
 * 4. Settings - Combined config (lists, targets, dates)
 * 5. Marketing - Spend tracking + performance
 * 6. Staff - Leaderboard
 * 7. Help - Instructions
 * 8. _Data - Hidden calculations
 */

// ============================================================
// MENU & INITIALIZATION
// ============================================================

function onOpen() {
  SpreadsheetApp.getUi()
    .createMenu('Gym Ops')
    .addItem('🧙 Quick Start Wizard', 'quickStartWizard')
    .addSeparator()
    .addItem('⚙️ Initialize Template', 'initializeTemplate')
    .addItem('🔄 Refresh Dashboards', 'refreshDashboards')
    .addItem('📊 Add Sample Data', 'addSampleData')
    .addToUi();
}

/**
 * Quick Start Wizard - Interactive 2-minute setup
 */
function quickStartWizard() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();
  
  // Step 1: Welcome
  const welcome = ui.alert(
    '👋 Welcome to Gym Ops Tracker!',
    'This 2-minute wizard will customize the template for your gym.\n\nClick OK to continue.',
    ui.ButtonSet.OK_CANCEL
  );
  if (welcome !== ui.Button.OK) return;
  
  // Step 2: Initialize if needed
  if (!ss.getSheetByName('DASHBOARD')) {
    ui.alert('Setting up template...', 'This will take 20 seconds.', ui.ButtonSet.OK);
    initializeTemplate(true); // Silent mode
  }
  
  // Step 3: Gym Name
  const gymNamePrompt = ui.prompt(
    'Step 1 of 4: Gym Name',
    'What\'s your gym or studio name?',
    ui.ButtonSet.OK_CANCEL
  );
  if (gymNamePrompt.getSelectedButton() !== ui.Button.OK) return;
  const gymName = gymNamePrompt.getResponseText();
  
  // Step 4: Monthly Target
  const targetPrompt = ui.prompt(
    'Step 2 of 4: Monthly Goal',
    'How many new members do you want per month?\n(Enter a number like 40)',
    ui.ButtonSet.OK_CANCEL
  );
  if (targetPrompt.getSelectedButton() !== ui.Button.OK) return;
  const targetMembers = parseInt(targetPrompt.getResponseText()) || 40;
  
  // Step 5: Lead Sources
  const sourcesResult = ui.alert(
    'Step 3 of 4: Lead Sources',
    'Default lead sources:\n• Facebook\n• Instagram\n• Google\n• Referral\n• Walk-in\n• Other\n\nKeep these defaults?',
    ui.ButtonSet.YES_NO
  );
  
  // Step 6: Sample Data
  const sampleResult = ui.alert(
    'Step 4 of 4: Sample Data',
    'Add 20 sample leads to test the system?\n\n(You can delete them later)',
    ui.ButtonSet.YES_NO
  );
  
  // Apply settings
  try {
    ss.rename(gymName + ' - Gym Ops');
    
    const settingsSheet = ss.getSheetByName('Settings');
    if (settingsSheet) {
      settingsSheet.getRange('B6').setValue(targetMembers); // New Members target
      settingsSheet.getRange('B2').setValue(Math.ceil(targetMembers * 3.5)); // Leads
    }
    
    if (sampleResult === ui.Button.YES) {
      addSampleData();
    }
    
    // Jump to Dashboard
    const dashboard = ss.getSheetByName('DASHBOARD');
    if (dashboard) ss.setActiveSheet(dashboard);
    
    ui.alert(
      '✅ Setup Complete!',
      'Your gym tracker is ready!\n\n' +
      '📊 Check DASHBOARD for overview\n' +
      '📝 Add leads in "Lead Data"\n' +
      '⚙️ Adjust "Settings" as needed',
      ui.ButtonSet.OK
    );
    
  } catch (error) {
    ui.alert('Error', 'Setup failed: ' + error.toString(), ui.ButtonSet.OK);
  }
}

/**
 * Main initialization - creates all 8 tabs
 */
function initializeTemplate(silent) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();
  
  if (!silent) {
    const result = ui.alert(
      'Initialize Template',
      'Create all 8 tabs with formulas?\n\nContinue?',
      ui.ButtonSet.YES_NO
    );
    if (result !== ui.Button.YES) return;
  }
  
  try {
    // Create 8 tabs
    createHelpTab(ss);
    createSettingsTab(ss);
    createLeadDataTab(ss);
    createMembersTab(ss);
    createMarketingTab(ss);
    createStaffTab(ss);
    createDataTab(ss);
    createDashboardTab(ss);
    
    createNamedRanges(ss);
    setupDataValidations(ss);
    createAllCharts(ss);
    reorderTabs(ss);
    
    if (!silent) {
      ui.alert('✅ Done!', 'All 8 tabs created. Run Quick Start Wizard next!', ui.ButtonSet.OK);
    }
    
  } catch (error) {
    ui.alert('Error', error.toString(), ui.ButtonSet.OK);
    Logger.log('Error: ' + error.toString());
  }
}

// ============================================================
// TAB CREATION
// ============================================================

function createDashboardTab(ss) {
  let sheet = ss.getSheetByName('DASHBOARD');
  if (!sheet) {
    sheet = ss.insertSheet('DASHBOARD');
  } else {
    sheet.clear();
  }
  
  // Header
  sheet.getRange('A1').setValue('📊 GYM OPS DASHBOARD').setFontSize(18).setFontWeight('bold');
  sheet.getRange('A2').setValue('Date Range:').setFontWeight('bold');
  sheet.getRange('B2').setFormula('=TEXT(Settings!B17,"yyyy-mm-dd") & " to " & TEXT(Settings!B18,"yyyy-mm-dd")');
  
  // KPIs
  sheet.getRange('A5').setValue('KPIs').setFontSize(14).setFontWeight('bold');
  const kpiHeaders = [['Metric', 'Actual', 'Target', 'Goal To Date', 'Variance', 'Status']];
  sheet.getRange('A6:F6').setValues(kpiHeaders).setFontWeight('bold').setBackground('#4285f4').setFontColor('#fff');
  
  const metrics = ['Leads', 'Set %', 'Show %', 'Close %', 'New Members', 'MRR', 'CAC'];
  sheet.getRange(7, 1, metrics.length, 1).setValues(metrics.map(m => [m]));
  
  const pace = '(MAX(0,MIN(Settings!B18,Settings!B19)-Settings!B17+1))/(MAX(1,Settings!B18-Settings!B17+1))';
  
  // Formulas - B column (Actual)
  sheet.getRange('B7').setFormula('=COUNTIFS(\'Lead Data\'!A:A,">="&Settings!B17,\'Lead Data\'!A:A,"<="&Settings!B18)');
  sheet.getRange('B8').setFormula('=IFERROR(COUNTIFS(\'Lead Data\'!K:K,TRUE,\'Lead Data\'!A:A,">="&Settings!B17,\'Lead Data\'!A:A,"<="&Settings!B18)/B7,0)');
  sheet.getRange('B9').setFormula('=IFERROR(COUNTIFS(\'Lead Data\'!M:M,TRUE,\'Lead Data\'!A:A,">="&Settings!B17,\'Lead Data\'!A:A,"<="&Settings!B18)/COUNTIFS(\'Lead Data\'!K:K,TRUE,\'Lead Data\'!A:A,">="&Settings!B17,\'Lead Data\'!A:A,"<="&Settings!B18),0)');
  sheet.getRange('B10').setFormula('=IFERROR(COUNTIFS(\'Lead Data\'!P:P,TRUE,\'Lead Data\'!Q:Q,">="&Settings!B17,\'Lead Data\'!Q:Q,"<="&Settings!B18)/COUNTIFS(\'Lead Data\'!M:M,TRUE,\'Lead Data\'!A:A,">="&Settings!B17,\'Lead Data\'!A:A,"<="&Settings!B18),0)');
  sheet.getRange('B11').setFormula('=COUNTIFS(\'Lead Data\'!Q:Q,">="&Settings!B17,\'Lead Data\'!Q:Q,"<="&Settings!B18,\'Lead Data\'!P:P,TRUE)');
  sheet.getRange('B12').setFormula('=SUMIFS(\'Lead Data\'!S:S,\'Lead Data\'!Q:Q,">="&Settings!B17,\'Lead Data\'!Q:Q,"<="&Settings!B18,\'Lead Data\'!P:P,TRUE)');
  sheet.getRange('B13').setFormula('=IFERROR(SUMIFS(Marketing!D:D,Marketing!A:A,">="&Settings!B17,Marketing!A:A,"<="&Settings!B18)/B11,0)');
  
  // Targets - C column
  for (let i = 2; i <= 7; i++) {
    sheet.getRange(5 + i, 3).setFormula(`=Settings!B${i}`);
  }
  sheet.getRange('C12').setFormula('=C11*Settings!B9'); // MRR = members * ARPU
  
  // Goal To Date - D column
  for (let row = 7; row <= 13; row++) {
    sheet.getRange(row, 4).setFormula(`=IF(C${row}="","",C${row}*${pace})`);
  }
  
  // Variance - E column
  for (let row = 7; row <= 13; row++) {
    sheet.getRange(row, 5).setFormula(`=IF(D${row}="","",B${row}-D${row})`);
  }
  
  // Status - F column
  for (let row = 7; row <= 13; row++) {
    if (row === 13) { // CAC - lower is better
      sheet.getRange(row, 6).setFormula(`=IF(D${row}="","",IF(B${row}<=D${row},"ON PACE","BEHIND"))`);
    } else {
      sheet.getRange(row, 6).setFormula(`=IF(D${row}="","",IF(B${row}>=D${row},"ON PACE","BEHIND"))`);
    }
  }
  
  // Format
  sheet.getRange('B8:F10').setNumberFormat('0.0%');
  sheet.getRange('B12:F12').setNumberFormat('$#,##0');
  sheet.getRange('B13:F13').setNumberFormat('$#,##0');
  
  // Action Items
  sheet.getRange('A17').setValue('🔔 ACTION ITEMS').setFontSize(14).setFontWeight('bold');
  sheet.getRange('A19').setValue('🔴 No Appt Set (24h)').setFontWeight('bold');
  sheet.getRange('A20').setFormula('=IFERROR(ARRAYFORMULA("→ "&FILTER(\'Lead Data\'!B:B&" "&\'Lead Data\'!C:C,\'Lead Data\'!A:A<TODAY()-1,\'Lead Data\'!K:K=FALSE,\'Lead Data\'!P:P=FALSE)),"✓ None")');
  
  sheet.getRange('A24').setValue('🟡 No Shows').setFontWeight('bold');
  sheet.getRange('A25').setFormula('=IFERROR(ARRAYFORMULA("→ "&FILTER(\'Lead Data\'!B:B&" "&\'Lead Data\'!C:C,\'Lead Data\'!M:M=FALSE,\'Lead Data\'!L:L<>"",\'Lead Data\'!L:L<TODAY(),\'Lead Data\'!P:P=FALSE)),"✓ None")');
  
  sheet.getRange('A29').setValue('🟠 Trials Expiring (3d)').setFontWeight('bold');
  sheet.getRange('A30').setFormula('=IFERROR(ARRAYFORMULA("→ "&FILTER(\'Lead Data\'!B:B&" "&\'Lead Data\'!C:C,\'Lead Data\'!O:O>=TODAY(),\'Lead Data\'!O:O<=TODAY()+3,\'Lead Data\'!P:P=FALSE,\'Lead Data\'!N:N<>"")),"✓ None")');
  
  // Member Alerts
  sheet.getRange('A37').setValue('👥 MEMBER ALERTS').setFontSize(14).setFontWeight('bold');
  sheet.getRange('A39').setValue('🎯 Trials Ending (7d)').setFontWeight('bold');
  sheet.getRange('A40').setFormula('=IFERROR(ARRAYFORMULA("→ "&FILTER(\'Lead Data\'!B:B&" "&\'Lead Data\'!C:C,\'Lead Data\'!O:O>=TODAY(),\'Lead Data\'!O:O<=TODAY()+7,\'Lead Data\'!N:N<>"")),"✓ None")');
  
  sheet.getRange('A44').setValue('🎂 Birthdays This Month').setFontWeight('bold');
  sheet.getRange('A45').setFormula('=IFERROR(ARRAYFORMULA("→ "&FILTER(\'Lead Data\'!B:B&" "&\'Lead Data\'!C:C,MONTH(\'Lead Data\'!F:F)=MONTH(TODAY()),\'Lead Data\'!P:P=TRUE,\'Lead Data\'!U:U<>TRUE,\'Lead Data\'!F:F<>"")),"✓ None")');
  
  sheet.setColumnWidths(1, 6, 130);
  sheet.setFrozenRows(6);
  
  // Conditional formatting
  const onPace = SpreadsheetApp.newConditionalFormatRule()
    .whenTextEqualTo('ON PACE').setBackground('#b7e1cd').setFontColor('#0f6938')
    .setRanges([sheet.getRange('F7:F13')]).build();
  const behind = SpreadsheetApp.newConditionalFormatRule()
    .whenTextEqualTo('BEHIND').setBackground('#f4c7c3').setFontColor('#cc0000')
    .setRanges([sheet.getRange('F7:F13')]).build();
  sheet.setConditionalFormatRules([onPace, behind]);
}

function createLeadDataTab(ss) {
  let sheet = ss.getSheetByName('Lead Data');
  if (!sheet) {
    sheet = ss.insertSheet('Lead Data');
  } else if (sheet.getLastRow() > 1) {
    return; // Preserve data
  } else {
    sheet.clear();
  }
  
  // 25 columns (A-Y)
  const headers = [[
    'Created Date', 'First Name', 'Last Name', 'Phone', 'Email', 'DOB',
    'Source', 'Campaign', 'Staff Owner', 'Location',
    'Appt Set?', 'Appt Date', 'Show?', 'Trial Start', 'Trial End',
    'Converted?', 'Member Start', 'Membership Type', 'MRR ($)', 'Upfront Fee ($)',
    'Cancelled?', 'Cancel Date', 'Cancel Reason', 'Notes', 'Current Status'
  ]];
  
  sheet.getRange('A1:Y1').setValues(headers).setFontWeight('bold').setBackground('#4285f4').setFontColor('#fff').setWrap(true);
  
  // Auto formulas
  sheet.getRange('O2').setFormula('=ARRAYFORMULA(IF(N2:N="",, N2:N+Settings!B21))'); // Trial End
  sheet.getRange('Y2').setFormula('=ARRAYFORMULA(IF(A2:A="","",IF(U2:U=TRUE,"Cancelled",IF(P2:P=TRUE,"Member",IF(N2:N<>"","Trial",IF(M2:M=TRUE,"Show",IF(K2:K=TRUE,"Appt Set","Lead")))))))'); // Status
  
  // Column widths
  sheet.setColumnWidth(1, 110);
  sheet.setColumnWidths(2, 5, 100);
  sheet.setColumnWidths(7, 4, 120);
  sheet.setColumnWidths(11, 14, 100);
  sheet.setColumnWidth(24, 200);
  
  // Formats
  const dateColumns = ['A', 'F', 'L', 'N', 'O', 'Q', 'V'];
  dateColumns.forEach(col => sheet.getRange(col + ':' + col).setNumberFormat('yyyy-mm-dd'));
  sheet.getRange('S:T').setNumberFormat('$#,##0.00');
  
  // Visual cue for auto columns
  sheet.getRange('O:O').setBackground('#d9ead3');
  sheet.getRange('Y:Y').setBackground('#d9ead3');
  
  sheet.setFrozenRows(1);
  sheet.setFrozenColumns(3);
}

function createMembersTab(ss) {
  let sheet = ss.getSheetByName('Members');
  if (!sheet) sheet = ss.insertSheet('Members');
  else sheet.clear();
  
  sheet.getRange('A1').setFormula('={\'Lead Data\'!A1:Y1; QUERY(FILTER(\'Lead Data\'!A2:Y,\'Lead Data\'!P2:P=TRUE,\'Lead Data\'!U2:U<>TRUE),"WHERE Col1 IS NOT NULL",0)}');
  sheet.setFrozenRows(1);
}

function createSettingsTab(ss) {
  let sheet = ss.getSheetByName('Settings');
  if (!sheet) sheet = ss.insertSheet('Settings');
  else sheet.clear();
  
  // Targets
  sheet.getRange('A1').setValue('🎯 MONTHLY TARGETS').setFontSize(14).setFontWeight('bold');
  const targets = [
    ['Metric', 'Target'],
    ['Leads', 200],
    ['Set Rate (%)', 0.60],
    ['Show Rate (%)', 0.70],
    ['Close Rate (%)', 0.50],
    ['New Members', 42],
    ['CAC ($)', 150],
    ['Monthly Churn (%)', 0.05],
    ['ARPU ($)', 150]
  ];
  sheet.getRange(2, 1, targets.length, 2).setValues(targets);
  sheet.getRange('A2:B2').setFontWeight('bold').setBackground('#4285f4').setFontColor('#fff');
  
  // Dropdowns
  sheet.getRange('A12').setValue('📋 DROPDOWNS').setFontSize(14).setFontWeight('bold');
  const listHeaders = [['Sources', 'Staff', 'Locations', 'Types', 'Cancel Reasons']];
  sheet.getRange('A13:E13').setValues(listHeaders).setFontWeight('bold').setBackground('#4285f4').setFontColor('#fff');
  
  const sources = ['Facebook', 'Instagram', 'Google', 'Referral', 'Walk-in', 'Other'];
  const staff = ['Front Desk', 'Coach A', 'Coach B'];
  const locations = ['Location A', 'Location B'];
  const types = ['PT', 'Small Group', 'General', 'Class Pack'];
  const reasons = ['Price', 'Moved', 'Injury', 'Service', 'Location', 'Other'];
  
  sheet.getRange(14, 1, sources.length, 1).setValues(sources.map(s => [s]));
  sheet.getRange(14, 2, staff.length, 1).setValues(staff.map(s => [s]));
  sheet.getRange(14, 3, locations.length, 1).setValues(locations.map(l => [l]));
  sheet.getRange(14, 4, types.length, 1).setValues(types.map(t => [t]));
  sheet.getRange(14, 5, reasons.length, 1).setValues(reasons.map(r => [r]));
  
  // Date Range
  sheet.getRange('A16').setValue('📅 DATE RANGE').setFontSize(14).setFontWeight('bold');
  sheet.getRange('A17').setValue('Start Date').setFontWeight('bold');
  sheet.getRange('B17').setValue(new Date(new Date().getFullYear(), new Date().getMonth(), 1));
  sheet.getRange('A18').setValue('End Date').setFontWeight('bold');
  sheet.getRange('B18').setValue(new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0));
  sheet.getRange('A19').setValue('As of (pace)').setFontWeight('bold');
  sheet.getRange('B19').setFormula('=TODAY()');
  sheet.getRange('B17:B19').setNumberFormat('yyyy-mm-dd');
  
  // Other Settings
  sheet.getRange('A21').setValue('Trial Length (days)').setFontWeight('bold');
  sheet.getRange('B21').setValue(14);
  
  sheet.setColumnWidths(1, 5, 150);
}

function createMarketingTab(ss) {
  let sheet = ss.getSheetByName('Marketing');
  if (!sheet) sheet = ss.insertSheet('Marketing');
  else if (sheet.getLastRow() > 1 && sheet.getLastRow() < 100) return;
  else sheet.clear();
  
  sheet.getRange('A1').setValue('💰 MARKETING SPEND').setFontSize(14).setFontWeight('bold');
  const headers = [['Date', 'Source', 'Location', 'Spend ($)']];
  sheet.getRange('A2:D2').setValues(headers).setFontWeight('bold').setBackground('#4285f4').setFontColor('#fff');
  
  sheet.getRange('A:A').setNumberFormat('yyyy-mm-dd');
  sheet.getRange('D:D').setNumberFormat('$#,##0.00');
  sheet.setColumnWidths(1, 4, 120);
  sheet.setFrozenRows(2);
}

function createStaffTab(ss) {
  let sheet = ss.getSheetByName('Staff');
  if (!sheet) sheet = ss.insertSheet('Staff');
  else sheet.clear();
  
  sheet.getRange('A1').setValue('🏆 STAFF LEADERBOARD').setFontSize(16).setFontWeight('bold');
  const headers = [['Staff', 'Leads', 'Sets', 'Shows', 'Closes', 'Close %', 'MRR', 'Upfront']];
  sheet.getRange('A3:H3').setValues(headers).setFontWeight('bold').setBackground('#4285f4').setFontColor('#fff');
  sheet.setColumnWidths(1, 8, 130);
  sheet.setFrozenRows(3);
}

function createHelpTab(ss) {
  let sheet = ss.getSheetByName('Help');
  if (!sheet) sheet = ss.insertSheet('Help');
  else sheet.clear();
  
  const content = [
    ['🏋️ GYM OPS TRACKER - QUICK GUIDE'],
    [''],
    ['📊 DASHBOARD - Your morning overview'],
    ['  • Check KPIs & on-pace status'],
    ['  • Review action items'],
    ['  • See member alerts'],
    [''],
    ['📝 LEAD DATA - Enter all leads here (25 columns)'],
    ['  • Fill: Name, Phone, Email, Source, Staff, Location'],
    ['  • Check: Appt Set → Show → Converted → Cancelled'],
    ['  • Trial End and Status auto-calculate'],
    [''],
    ['⚙️ SETTINGS - Configure tracker'],
    ['  • Set monthly targets'],
    ['  • Customize dropdowns'],
    ['  • Adjust date range'],
    [''],
    ['💰 MARKETING - Track spend'],
    ['  • Enter: Date, Source, Location, Spend'],
    ['  • Performance auto-calcs'],
    [''],
    ['🏆 STAFF - Team leaderboard'],
    ['  • Auto-calculated by staff owner'],
    [''],
    ['🧙 QUICK START WIZARD'],
    ['  • Run from Gym Ops menu'],
    ['  • 2-minute interactive setup'],
    [''],
    ['🎯 DAILY WORKFLOW'],
    ['  1. Enter leads in Lead Data'],
    ['  2. Check DASHBOARD action items'],
    ['  3. Follow up on leads'],
    ['  4. Review on-pace status'],
  ];
  
  sheet.getRange(1, 1, content.length, 1).setValues(content);
  sheet.getRange('A1').setFontSize(14).setFontWeight('bold');
  [3, 8, 13, 18, 21, 24, 27].forEach(row => sheet.getRange(row, 1).setFontWeight('bold'));
  sheet.setColumnWidth(1, 800);
}

function createDataTab(ss) {
  let sheet = ss.getSheetByName('_Data');
  if (!sheet) sheet = ss.insertSheet('_Data');
  else sheet.clear();
  
  // Last 90 days active members
  const headers = [['Date', 'Active Members']];
  sheet.getRange('A1:B1').setValues(headers).setFontWeight('bold').setBackground('#4285f4').setFontColor('#fff');
  
  for (let i = 89; i >= 0; i--) {
    const row = 92 - i;
    sheet.getRange(row, 1).setFormula(`=TODAY()-${i}`).setNumberFormat('yyyy-mm-dd');
    sheet.getRange(row, 2).setFormula(`=COUNTIFS('Lead Data'!Q:Q,"<="&A${row},'Lead Data'!P:P,TRUE)-COUNTIFS('Lead Data'!V:V,"<="&A${row},'Lead Data'!U:U,TRUE)`);
  }
  
  sheet.hideSheet();
}

// ============================================================
// SETUP FUNCTIONS
// ============================================================

function createNamedRanges(ss) {
  try {
    ss.setNamedRange('rngStart', ss.getRange('Settings!B17'));
    ss.setNamedRange('rngEnd', ss.getRange('Settings!B18'));
    ss.setNamedRange('rngAsOf', ss.getRange('Settings!B19'));
  } catch (e) {
    Logger.log('Named ranges error: ' + e);
  }
}

function setupDataValidations(ss) {
  const leadData = ss.getSheetByName('Lead Data');
  const settings = ss.getSheetByName('Settings');
  const marketing = ss.getSheetByName('Marketing');
  
  if (!leadData || !settings) return;
  
  const sourceRange = settings.getRange('A14:A100');
  const staffRange = settings.getRange('B14:B100');
  const locationRange = settings.getRange('C14:C100');
  const typeRange = settings.getRange('D14:D100');
  const reasonRange = settings.getRange('E14:E100');
  
  leadData.getRange('G2:G5000').setDataValidation(SpreadsheetApp.newDataValidation().requireValueInRange(sourceRange, true).build());
  leadData.getRange('I2:I5000').setDataValidation(SpreadsheetApp.newDataValidation().requireValueInRange(staffRange, true).build());
  leadData.getRange('J2:J5000').setDataValidation(SpreadsheetApp.newDataValidation().requireValueInRange(locationRange, true).build());
  leadData.getRange('R2:R5000').setDataValidation(SpreadsheetApp.newDataValidation().requireValueInRange(typeRange, true).build());
  leadData.getRange('W2:W5000').setDataValidation(SpreadsheetApp.newDataValidation().requireValueInRange(reasonRange, true).build());
  
  const checkbox = SpreadsheetApp.newDataValidation().requireCheckbox().build();
  leadData.getRange('K2:K5000').setDataValidation(checkbox);
  leadData.getRange('M2:M5000').setDataValidation(checkbox);
  leadData.getRange('P2:P5000').setDataValidation(checkbox);
  leadData.getRange('U2:U5000').setDataValidation(checkbox);
  
  if (marketing) {
    marketing.getRange('B3:B5000').setDataValidation(SpreadsheetApp.newDataValidation().requireValueInRange(sourceRange, true).build());
    marketing.getRange('C3:C5000').setDataValidation(SpreadsheetApp.newDataValidation().requireValueInRange(locationRange, true).build());
  }
}

function createAllCharts(ss) {
  try {
    const dashboard = ss.getSheetByName('DASHBOARD');
    const dataSheet = ss.getSheetByName('_Data');
    if (!dashboard || !dataSheet) return;
    
    dashboard.getCharts().forEach(chart => dashboard.removeChart(chart));
    
    const trend = dashboard.newChart()
      .setChartType(Charts.ChartType.LINE)
      .addRange(dataSheet.getRange('A2:B92'))
      .setPosition(52, 1, 0, 0)
      .setOption('title', 'Active Members (90 Days)')
      .setOption('width', 600)
      .setOption('height', 300)
      .build();
    dashboard.insertChart(trend);
    
  } catch (e) {
    Logger.log('Charts error: ' + e);
  }
}

function reorderTabs(ss) {
  const order = ['DASHBOARD', 'Lead Data', 'Members', 'Settings', 'Marketing', 'Staff', 'Help', '_Data'];
  order.forEach((name, index) => {
    const sheet = ss.getSheetByName(name);
    if (sheet) {
      ss.setActiveSheet(sheet);
      ss.moveActiveSheet(index + 1);
    }
  });
  const dashboard = ss.getSheetByName('DASHBOARD');
  if (dashboard) ss.setActiveSheet(dashboard);
}

// ============================================================
// UTILITY FUNCTIONS
// ============================================================

function refreshDashboards() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();
  
  try {
    const settings = ss.getSheetByName('Settings');
    if (settings) {
      const cell = settings.getRange('B19');
      const val = cell.getValue();
      cell.setValue('');
      SpreadsheetApp.flush();
      cell.setValue(val);
      SpreadsheetApp.flush();
    }
    ui.alert('✅ Refreshed!', 'Dashboards recalculated.', ui.ButtonSet.OK);
  } catch (error) {
    ui.alert('Error', error.toString(), ui.ButtonSet.OK);
  }
}

function addSampleData() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName('Lead Data');
  if (!sheet) return;
  
  const lastRow = Math.max(sheet.getLastRow(), 1);
  const startRow = lastRow + 1;
  
  const sources = ['Facebook', 'Instagram', 'Google', 'Referral', 'Walk-in'];
  const staff = ['Front Desk', 'Coach A', 'Coach B'];
  const locations = ['Location A', 'Location B'];
  const types = ['PT', 'Small Group', 'General'];
  const firstNames = ['John', 'Jane', 'Mike', 'Sarah', 'Tom', 'Emily', 'David', 'Lisa'];
  const lastNames = ['Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Garcia'];
  
  const data = [];
  const today = new Date();
  
  for (let i = 0; i < 20; i++) {
    const daysAgo = Math.floor(Math.random() * 60);
    const created = new Date(today);
    created.setDate(today.getDate() - daysAgo);
    
    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];
    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];
    
    const apptSet = Math.random() > 0.3;
    const showed = apptSet && Math.random() > 0.3;
    const converted = showed && Math.random() > 0.5;
    
    data.push([
      created,
      firstName,
      lastName,
      `555-${String(Math.floor(Math.random() * 9000) + 1000)}`,
      `${firstName.toLowerCase()}.${lastName.toLowerCase()}@test.com`,
      new Date(1985 + Math.floor(Math.random() * 25), Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1),
      sources[Math.floor(Math.random() * sources.length)],
      `Campaign ${i % 5 + 1}`,
      staff[Math.floor(Math.random() * staff.length)],
      locations[Math.floor(Math.random() * locations.length)],
      apptSet,
      apptSet ? new Date(created.getTime() + 86400000) : '',
      showed,
      showed ? new Date(created.getTime() + 2 * 86400000) : '',
      '',
      converted,
      converted ? new Date(created.getTime() + 16 * 86400000) : '',
      converted ? types[Math.floor(Math.random() * types.length)] : '',
      converted ? Math.floor(Math.random() * 100) + 100 : '',
      converted ? Math.floor(Math.random() * 150) + 50 : '',
      false,
      '',
      '',
      `Sample lead ${i + 1}`,
      ''
    ]);
  }
  
  sheet.getRange(startRow, 1, data.length, 25).setValues(data);
  SpreadsheetApp.getUi().alert('✅ Done', `Added ${data.length} sample leads.`, SpreadsheetApp.getUi().ButtonSet.OK);
}

function testScript() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();
  Logger.log('Script working! Sheet: ' + ss.getName());
  ui.alert('✅ Script OK', 'Next: Gym Ops → Quick Start Wizard', ui.ButtonSet.OK);
}
